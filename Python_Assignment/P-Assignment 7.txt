1. What is the name of the feature responsible for generating Regex objects?

ANS=The feature in Python responsible for generating Regex objects is the "re" module. It provides support for regular expressions (regex) in Python by enabling the creation of pattern objects using the "compile" function or directly through the use of various regex functions. The resulting Regex objects can be used to search, match, and manipulate strings according to the specified pattern.

2. Why do raw strings often appear in Regex objects?

ANS=Raw strings are often used in Regex objects because they allow the backslash character () to be interpreted as a literal character, rather than as an escape character that modifies the meaning of the following character(s). In regular expressions, backslashes are commonly used to escape certain characters with special meaning, such as parentheses or the period (which matches any character).


3. What is the return value of the search() method?

ANS=In Python, the search() method is a part of the re (regular expression) module, and it returns a match object if the pattern is found, or None if the pattern is not found.

The match object contains information about the match, such as the location of the match within the string, the matched substring, and any groups captured by the pattern.


4. From a Match item, how do you get the actual strings that match the pattern?

ANS=In Python, you can use the group() method of a match object to get the actual strings that match the pattern. The group() method returns the entire matched string, or a specific captured group if the pattern contains groups.

If the pattern contains multiple groups, you can use group(n) to get the nth captured group, where n is the group number (starting from 1).


5. In the regex which created from the r'(\d\d\d)-(\d\d\d-\d\d\d\d)', what does group zero cover?
Group 2? Group 1?

ANS=The regular expression r'(\d\d\d)-(\d\d\d-\d\d\d\d)' contains two groups, which are enclosed in parentheses.

Group zero (0) refers to the entire match, including all captured groups. In this case, group zero covers the entire phone number in the format of "###-###-####".

6. In standard expression syntax, parentheses and intervals have distinct meanings. How can you tell
a regex that you want it to fit real parentheses and periods?

ANS=To match literal parentheses and periods in a regular expression, you need to "escape" them by placing a backslash (\) before them. This tells the regular expression engine to treat them as literal characters, rather than as special characters with their usual meanings.

For example, to match a literal left parenthesis, you can use the regular expression \(. Similarly, to match a literal right parenthesis, you can use the regular expression \).
To match a literal period, we can use the regular expression \..

7. The findall() method returns a string list or a list of string tuples. What causes it to return one of the two options?

ANS=The findall() method is a regular expression method available in Python's re module, which searches a string for all occurrences of a specified pattern and returns the matched substrings as a list of strings or a list of tuples.
Therefore, the output format of findall() depends on whether the regular expression pattern contains capturing groups or not. If there are no capturing groups, it returns a list of strings, and if there are capturing groups, it returns a list of tuples.


8. In standard expressions, what does the | character mean?

ANS=In regular expressions, the | character is known as a pipe or vertical bar and is used as a logical OR operator. It is used to match either the expression before or after it.

9. In regular expressions, what does the character stand for?

ANS=In regular expressions (regex), characters are used to define the pattern that we want to match in a given string

Literal characters: These are characters that match themselves. For example, the regular expression pattern cat matches the literal characters "c", "a", and "t" in a string.

10.In regular expressions, what is the difference between the + and * characters?

ANS=The main difference between them is as follows:

The + character matches one or more occurrences of the preceding character or group. For example, the regular expression a+ matches one or more "a" characters in a row, such as "a", "aa", "aaa", etc., but not "b" or "ab".

The * character matches zero or more occurrences of the preceding character or group. For example, the regular expression a* matches zero or more "a" characters in a row, such as "", "a", "aa", "aaa", etc., and also matches "b" or "ab" since there are zero occurrences of the "a" character.

11. What is the difference between {4} and {4,5} in regular expression?

ANS=In regular expressions, {4} and {4,5} are both quantifiers that specify the number of times a preceding character or group should be matched.

{4} means that the preceding character or group should be matched exactly four times. For example, the regular expression "a{4}" would match the string "aaaa", but not "aa" or "aaaaa".

{4,5} means that the preceding character or group should be matched between four and five times. For example, the regular expression "a{4,5}" would match the strings "aaaa" and "aaaaa", but not "aa" or "aaaaaaaa".

12. What do you mean by the \d, \w, and \s shorthand character classes signify in regular expressions?

ANS=\d: matches any digit character, which is equivalent to [0-9].

\w: matches any word character, which includes alphanumeric characters (A-Z, a-z, 0-9) and underscore (). It is equivalent to [A-Za-z0-9].

\s: matches any whitespace character, which includes spaces, tabs, and line breaks.

13. What do means by \D, \W, and \S shorthand character classes signify in regular expressions?

ANS=\D: matches any character that is not a digit, which is equivalent to [^0-9].
\W: matches any character that is not a word character, which includes any character that is not alphanumeric or an underscore. It is equivalent to [^A-Za-z0-9_].

\S: matches any character that is not a whitespace character.

14. What is the difference between .*? and .?

ANS=The difference between .? and . is that the former is a lazy quantifier that matches as few characters as possible, while the latter is a greedy quantifier that matches as many characters as possible.

The dot (.) in both patterns matches any character except line breaks. The asterisk (*) is a quantifier that means "match zero or more of the preceding character or group".

In the pattern .*?, the question mark (?) is a lazy quantifier that modifies the behavior of the preceding quantifier to match as few characters as possible to make the overall match succeed. This is often used in cases where you want to match a string between two specific patterns or delimiters, where the shortest possible match is desired.

15. What is the syntax for matching both numbers and lowercase letters with a character class?

ANS=To match both numbers and lowercase letters with a character class, you can use the following syntax:

[0-9a-z]
This character class will match any single character that is either a digit between 0 and 9, or a lowercase letter between a and z. The dash (-) between 0-9 and a-z indicates a range of characters, while the square brackets [] enclose the character class.

16. What is the procedure for making a normal expression in regex case insensitive?

ANS=To make a regular expression case-insensitive in regex, you can use the flag or modifier "i" after the closing delimiter of the regex pattern. The "i" flag stands for "ignore case" and tells the regex engine to ignore the case of the characters in the pattern.

17. What does the . character normally match? What does it match if re.DOTALL is passed as 2nd argument in re.compile()?

ANS=In regular expressions, the dot (.) character normally matches any character except for newline characters.

However, if re.DOTALL (or re.S) is passed as the second argument to re.compile(), then the dot character will match any character, including newline characters. This flag tells the regex engine to treat the entire string as a single line and not to stop at newline characters.

18. If numReg = re.compile(r'\d+'), what will numRegex.sub('X', '11 drummers, 10 pipers, five rings, 4 hen') return?

ANS=If numReg = re.compile(r'\d+') and numRegex.sub('X', '11 drummers, 10 pipers, five rings, 4 hen') is called, it will return the string 'X drummers, X pipers, five rings, X hen'.

19. What does passing re.VERBOSE as the 2nd argument to re.compile() allow to do?

ANS=Passing re.VERBOSE as the second argument to re.compile() in Python allows for more readable and maintainable regular expressions by allowing the use of whitespace and comments within the regular expression pattern.

Using re.VERBOSE in this way can make complex regular expressions easier to read and maintain, especially when working on large projects.

20. How would you write a regex that match a number with comma for every three digits? It must match the given following:
'42'
'1,234'
'6,368,745'
but not the following:
'12,34,567' (which has only two digits between the commas)
'1234' (which lacks commas)

ANS= Using this regex, the following strings will match:

'42'
'1,234'
'6,368,745'
And the following strings will not match:

'12,34,567' (which has only two digits between the commas)
'1234' (which lacks commas)

21. How would you write a regex that matches the full name of someone whose last name is
Watanabe? You can assume that the first name that comes before it will always be one word that
begins with a capital letter. The regex must match the following:
'Haruto Watanabe'
'Alice Watanabe'
'RoboCop Watanabe'
but not the following:
'haruto Watanabe' (where the first name is not capitalized)
'Mr. Watanabe' (where the preceding word has a nonletter character)
'Watanabe' (which has no first name)
'Haruto watanabe' (where Watanabe is not capitalized)

ANS=
Using this regex, the following strings will match:

'Haruto Watanabe'
'Alice Watanabe'
'RoboCop Watanabe'
And the following strings will not match:

'haruto Watanabe' (where the first name is not capitalized)
'Mr. Watanabe' (where the preceding word has a nonletter character)
'Watanabe' (which has no first name)
'Haruto watanabe' (where Watanabe is not capitalized)


22. How would you write a regex that matches a sentence where the first word is either Alice, Bob,
or Carol; the second word is either eats, pets, or throws; the third word is apples, cats, or baseballs;
and the sentence ends with a period? This regex should be case-insensitive. It must match the
following:
'Alice eats apples.'
'Bob pets cats.'
'Carol throws baseballs.'
'Alice throws Apples.'
'BOB EATS CATS.'
but not the following:
'RoboCop eats apples.'
'ALICE THROWS FOOTBALLS.'
'Carol eats 7 cats.'

ANS=Using this regex, the following strings will match:

'Alice eats apples.'
'Bob pets cats.'
'Carol throws baseballs.'
'Alice throws Apples.'
'BOB EATS CATS.'
And the following strings will not match:

'RoboCop eats apples.'
'ALICE THROWS FOOTBALLS.'
'Carol eats 7 cats.' (which contains a number)