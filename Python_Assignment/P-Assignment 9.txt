1. To what does a relative path refer?

ANS=Relative paths can be specified using . to refer to the current directory or .. to refer to the parent directory

2. What does an absolute path start with your operating system?

ANS=An absolute path typically starts with a drive letter, followed by a colon (:), and then a backslash (\). For example, C:\Users\JohnDoe\Documents\file.txt is an absolute path that refers to a file named file.txt in the Documents folder of the JohnDoe user's home directory on the C: drive.

3. What do the functions os.getcwd() and os.chdir() do?

ANS=os.getcwd() stands for "get current working directory". This function returns a string that represents the current working directory of the Python script or shell that is being executed. The working directory is the directory that the script is currently running in.

os.chdir() stands for "change directory". This function is used to change the current working directory of the Python script or shell that is being executed. The new working directory is passed as an argument to the function.

4. What are the . and .. folders?

ANS=The . directory, also known as the "current directory", represents the directory you are currently in. It is used to reference files and directories in the current directory. For example, if you are in the directory /home/user/documents, the file example.txt in the same directory can be referred to as ./example.txt.

The .. directory, also known as the "parent directory", represents the directory that contains the current directory. It is used to reference files and directories in the parent directory. For example, if you are in the directory /home/user/documents, the file example.txt in the parent directory can be referred to as ../example.txt.

5. In C:\bacon\eggs\spam.txt, which part is the dir name, and which part is the base name?

ANS=In the file path C:\bacon\eggs\spam.txt:

The directory name is C:\bacon\eggs.
The base name is spam.txt.

6. What are the three “mode” arguments that can be passed to the open() function?

ANS= The mode argument specifies the purpose for which the file is opened and determines what operations can be performed on it. There are three main mode arguments that can be passed to the open() function:

'r' - Read mode: This mode is used to open a file for reading. The file pointer is placed at the beginning of the file, and you can read the contents of the file.

'w' - Write mode: This mode is used to open a file for writing. If the file already exists, its contents will be truncated. If the file does not exist, it will be created. You can write data to the file using the file object's write() method.

'a' - Append mode: This mode is used to open a file for appending. The file pointer is placed at the end of the file, and any data you write to the file will be added to the end.

7. What happens if an existing file is opened in write mode?

ANS=If an existing file is opened in write mode ('w'), its contents will be truncated or overwritten. In other words, any data that was previously in the file will be deleted, and new data can be written to the file from scratch. If the file doesn't exist, a new file with the specified name will be created.

8. How do you tell the difference between read() and readlines()?

ANS=In Python, both the read() and readlines() methods are used to read data from a file, but they return different data types.

The read() method reads the entire contents of a file and returns a string containing all the data. If you specify an integer argument, read() will read that many bytes from the file, starting from the current file position. 
We would use read() when you want to read the entire file as a single string, and readlines() when you want to read the file as a list of strings, where each string is a line from the file.

9. What data structure does a shelf value resemble?

ANS=A shelf value in Python is a dictionary-like object that is used to store and retrieve Python objects.
A shelf value in Python resembles a dictionary data structure, where keys are strings and values are Python objects. You can access values in a shelf by key, just like you would in a dictionary: